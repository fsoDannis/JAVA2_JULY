package com.dannis.toptrackapp;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.net.Uri;
import android.util.Log;
import android.provider.BaseColumns;
import android.provider.Settings.System;

public class MyContentProvider extends ContentProvider {
	
	static final String TAG = "topTrackApp";

	static final String AUTHORITY = "content://com.dannis.toptrackapp.MyContentProvider";
	
	public static class topTrackData implements BaseColumns{
		public static final Uri CONTENT_URI = Uri.parse(AUTHORITY +"/items");
	  	static final String CONTENT_TYPE = "vnd.android.cursor.item/vnd.dannis.toptrackapp.MyContentProvider.item";
	  	static final String CONTENT_ITEM_TYPE = "vnd.android.cursor.dir/vnd.dannis.toptrackapp.MyContentProvider.item";
	  	
	  	//Define Columns
	  	public static final String NAME_COLUMN = "name";
	  	public static final String LISTENERS_COLUMN = "listeners";
	  	public static final String URL_COLUMN = "url";
	  	
	  	public static final String[] PROJECTION ={"_Id", NAME_COLUMN, LISTENERS_COLUMN, URL_COLUMN};
	  	
	  	private topTrackData(){};
	  	
	}
	
	public static final int ITEMS = 1;
	public static final int ITEMS_ID = 2;
	
	
	private static final UriMatcher  uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
	
	static {
		uriMatcher.addURI(AUTHORITY,"items/",ITEMS);
		uriMatcher.addURI(AUTHORITY,"items/#",ITEMS_ID);
	}

  	 @Override
  	  public boolean onCreate() {
  	    Log.d(TAG, "onCreate");
  	    return true;
  	  }

  	  @Override
  	  public String getType(Uri uri) {
  		  switch (uriMatcher.match(uri)){
      //---get all terms---
      case ITEMS:
      return topTrackData.CONTENT_TYPE;
    
      case ITEMS_ID:
      return topTrackData.CONTENT_ITEM_TYPE;
         
		}
  		  return null;
	}

  	  @Override
  	  public Uri insert(Uri uri, ContentValues values) {
  	    Log.d(TAG, "insert uri: " + uri.toString());
  	    return null;
  	  }

  	  @Override
  	  public int update(Uri uri, ContentValues values, String selection,
  	      String[] selectionArgs) {
  	    Log.d(TAG, "update uri: " + uri.toString());
  	    return 0;
  	  }

  	  @Override
  	  public int delete(Uri uri, String selection, String[] selectionArgs) {
  	    Log.d(TAG, "delete uri: " + uri.toString());
  	    return 0;
  	  }

  	  @Override
  	  public Cursor query(Uri uri, String[] projection, String selection,
  	      String[] selectionArgs, String sortOrder) {
  		  
  		  switch (uriMatcher.match(uri)){
  	      //---get all terms---
  	      case ITEMS:
  	      return topTrackData.CONTENT_TYPE;
  	    
  	      case ITEMS_ID:
  	      return topTrackData.CONTENT_ITEM_TYPE;
  	         
  			}
  		  return null;
  	  }

  	}